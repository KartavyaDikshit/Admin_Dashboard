generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://tbi_user:karta123@localhost:5432/tbi_db"
}

// Enums
enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  ACTIVE
}

enum TranslationStatus {
  DRAFT
  PENDING_REVIEW
  IN_REVIEW
  APPROVED
  PUBLISHED
  REJECTED
}

enum TranslationJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  RETRY
}

enum ContentWorkflowStatus {
  GENERATING
  PENDING_REVIEW
  IN_REVISION
  REVISION_REQUIRED
  APPROVED
  PUBLISHED
  REJECTED
}

enum ContentJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum AdminRole {
  SUPERADMIN
  MANAGER
  EDITOR
  TRANSLATOR
  MODERATOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum LicenseType {
  SINGLE
  MULTIPLE
  CORPORATE
  ENTERPRISE
}

enum EnquiryStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATION
  CONVERTED
  CLOSED_LOST
  CLOSED_WON
}

// Models
model Category {
  id        String @id @default(uuid()) @db.Uuid
  shortcode String @unique @db.VarChar(20)
  slug      String @unique @db.VarChar(150)

  // Translated fields
  title_en       String? @db.VarChar(300)
  description_en String? @db.Text
  title_de       String? @db.VarChar(300)
  description_de String? @db.Text
  title_fr       String? @db.VarChar(300)
  description_fr String? @db.Text
  title_it       String? @db.VarChar(300)
  description_it String? @db.Text
  title_ja       String? @db.VarChar(300)
  description_ja String? @db.Text
  title_ko       String? @db.VarChar(300)
  description_ko String? @db.Text
  title_es       String? @db.VarChar(300)
  description_es String? @db.Text

  icon             String?       @db.VarChar(100)
  featured         Boolean       @default(false)
  sortOrder        Int           @default(0) @map("sort_order")
  seoKeywords      String[]      @default([]) @map("seo_keywords")
  regionalKeywords Json?         @map("regional_keywords")
  searchVolume     Json?         @map("search_volume")
  rankingFactors   Json?         @map("ranking_factors")
  metaTitle        String?       @map("meta_title") @db.VarChar(300)
  metaDescription  String?       @map("meta_description") @db.VarChar(500)
  canonicalUrl     String?       @map("canonical_url") @db.VarChar(500)
  ogTitle          String?       @map("og_title") @db.VarChar(300)
  ogDescription    String?       @map("og_description") @db.VarChar(500)
  ogImage          String?       @map("og_image") @db.VarChar(500)
  hreflangAlts     Json?         @map("hreflang_alts")
  status           ContentStatus @default(PUBLISHED)
  viewCount        BigInt        @default(0) @map("view_count")
  clickCount       BigInt        @default(0) @map("click_count")
  conversionRate   Decimal       @default(0) @map("conversion_rate") @db.Decimal(5, 4)
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  reports Report[]
  blogs   Blog[]

  translations CategoryTranslation[]

  @@map("categories")
}

model CategoryTranslation {
  id              String            @id @default(uuid()) @db.Uuid
  categoryId      String            @map("category_id") @db.Uuid
  locale          String            @db.VarChar(5)
  title           String?           @db.VarChar(300)
  description     String?           @db.Text
  seoKeywords     String[]          @default([]) @map("seo_keywords")
  metaTitle       String?           @db.VarChar(300) @map("meta_title")
  metaDescription String?           @db.VarChar(500) @map("meta_description")
  status          TranslationStatus @default(DRAFT)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, locale])
  @@map("category_translations")
}

model Report {
  id                          String        @id @default(uuid()) @db.Uuid
  sku                         String?       @unique @db.VarChar(50)
  slug                        String        @unique @db.VarChar(200)
  title                       String        @db.VarChar(500)
  description                 String        @db.Text
  summary                     String?       @db.Text
  pages                       Int           @default(0)
  publishedDate               DateTime      @map("published_date") @db.Date
  baseYear                    Int?          @map("base_year")
  forecastPeriod              String?       @map("forecast_period") @db.VarChar(50)
  tableOfContents             String?       @map("table_of_contents") @db.Text
  listOfFigures               String?       @map("list_of_figures") @db.Text
  methodology                 String?       @db.Text
  keyFindings                 String[]      @default([]) @map("key_findings")
  executiveSummary            String?       @map("executive_summary") @db.Text
  marketData                  Json?         @map("market_data")
  competitiveLandscape        Json?         @map("competitive_landscape")
  marketSegmentation          Json?         @map("market_segmentation")
  regionalAnalysis            Json?         @map("regional_analysis")
  swotAnalysis                Json?         @map("swot_analysis")
  keyPlayers                  String[]      @default([]) @map("key_players")
  regions                     String[]      @default([])
  industryTags                String[]      @default([]) @map("industry_tags")
  reportType                  String?       @map("report_type") @db.VarChar(50)
  researchMethod              String?       @map("research_method") @db.VarChar(100)
  keywords                    String[]      @default([])
  semanticKeywords            String[]      @default([]) @map("semantic_keywords")
  regionalKeywords            Json?         @map("regional_keywords")
  competitorKeywords          String[]      @default([]) @map("competitor_keywords")
  trendingKeywords            String[]      @default([]) @map("trending_keywords")
  longTailKeywords            String[]      @default([]) @map("long_tail_keywords")
  metaTitle                   String        @map("meta_title") @db.VarChar(500)
  metaDescription             String        @map("meta_description") @db.VarChar(500)
  canonicalUrl                String?       @map("canonical_url") @db.VarChar(500)
  ogTitle                     String?       @map("og_title") @db.VarChar(500)
  ogDescription               String?       @map("og_description") @db.VarChar(500)
  ogImage                     String?       @map("og_image") @db.VarChar(500)
  twitterTitle                String?       @map("twitter_title") @db.VarChar(500)
  twitterDescription          String?       @map("twitter_description") @db.VarChar(500)
  schemaMarkup                Json?         @map("schema_markup")
  breadcrumbData              Json?         @map("breadcrumb_data")
  faqData                     Json?         @map("faq_data")
  singlePrice                 Decimal?      @map("single_price") @db.Decimal(10, 2)
  multiPrice                  Decimal?      @map("multi_price") @db.Decimal(10, 2)
  corporatePrice              Decimal?      @map("corporate_price") @db.Decimal(10, 2)
  enterprisePrice             Decimal?      @map("enterprise_price") @db.Decimal(10, 2)
  currency                    String        @default("USD") @db.VarChar(3)
  aiGenerated                 Boolean       @default(false) @map("ai_generated")
  contentGenerationWorkflowId String?       @map("content_generation_workflow_id") @db.Uuid
  humanApproved               Boolean       @default(false) @map("human_approved")
  contentQualityScore         Decimal?      @map("content_quality_score") @db.Decimal(3, 2)
  aiConfidenceScore           Decimal?      @map("ai_confidence_score") @db.Decimal(3, 2)
  status                      ContentStatus @default(DRAFT)
  featured                    Boolean       @default(false)
  priority                    Int           @default(0)
  viewCount                   BigInt        @default(0) @map("view_count")
  downloadCount               BigInt        @default(0) @map("download_count")
  shareCount                  BigInt        @default(0) @map("share_count")
  enquiryCount                BigInt        @default(0) @map("enquiry_count")
  searchRankings              Json?         @map("search_rankings")
  clickThroughRate            Decimal?      @map("click_through_rate") @db.Decimal(5, 4)
  averagePosition             Decimal?      @map("average_position") @db.Decimal(5, 2)
  impressions                 BigInt        @default(0)
  clicks                      BigInt        @default(0)
  bounceRate                  Decimal?      @map("bounce_rate") @db.Decimal(5, 4)
  timeOnPage                  Int?          @map("time_on_page")
  avgRating                   Decimal?      @map("avg_rating") @db.Decimal(3, 2)
  reviewCount                 Int           @default(0) @map("review_count")
  totalRatingPoints           Int           @default(0) @map("total_rating_points")
  createdAt                   DateTime      @default(now()) @map("created_at")
  updatedAt                   DateTime      @updatedAt @map("updated_at")

  // Relations
  categories                Category[]
  orderItems                OrderItem[]
  enquiries                 Enquiry[]
  reviews                   ReportReview[]
  contentGenerationWorkflow ContentGenerationWorkflow? @relation(fields: [contentGenerationWorkflowId], references: [id])
  translations              ReportTranslation[]

  @@map("reports")
}

model ContentGenerationWorkflow {
  id                    String                @id @default(uuid()) @db.Uuid
  reportTitle           String                @map("report_title") @db.VarChar(500)
  language              String                @default("en") @db.VarChar(10)
  parentWorkflowId      String?               @map("parent_workflow_id") @db.Uuid
  industry              String?               @db.VarChar(255)
  marketSize            String?               @map("market_size") @db.VarChar(255)
  geographicScope       String?               @map("geographic_scope") @db.VarChar(255)
  timeframe             String?               @db.VarChar(50)
  reportType            String?               @map("report_type") @db.VarChar(50)
  customRequirements    String?               @map("custom_requirements") @db.Text
  targetLanguages       String[]              @default([]) @map("target_languages")
  phase1JobId           String?               @map("phase1_job_id") @db.Uuid
  phase2JobId           String?               @map("phase2_job_id") @db.Uuid
  phase3JobId           String?               @map("phase3_job_id") @db.Uuid
  phase4JobId           String?               @map("phase4_job_id") @db.Uuid
  phase5JobId           String?               @map("phase5_job_id") @db.Uuid
  marketAnalysis        String?               @map("market_analysis") @db.Text
  competitiveAnalysis   String?               @map("competitive_analysis") @db.Text
  trendsAnalysis        String?               @map("trends_analysis") @db.Text
  finalSynthesis        String?               @map("final_synthesis") @db.Text
  overallQualityScore   Decimal?              @map("overall_quality_score") @db.Decimal(3, 2)
  contentCoherence      Decimal?              @map("content_coherence") @db.Decimal(3, 2)
  factualAccuracy       Decimal?              @map("factual_accuracy") @db.Decimal(3, 2)
  marketInsightDepth    Decimal?              @map("market_insight_depth") @db.Decimal(3, 2)
  innovationScore       Decimal?              @map("innovation_score") @db.Decimal(3, 2)
  workflowStatus        ContentWorkflowStatus @default(GENERATING) @map("workflow_status")
  currentPhase          Int                   @default(1) @map("current_phase")
  assignedReviewerId    String?               @map("assigned_reviewer_id") @db.Uuid
  reviewNotes           String?               @map("review_notes") @db.Text
  revisionRequests      String[]              @default([]) @map("revision_requests")
  approvedBy            String?               @map("approved_by") @db.Uuid
  approvedAt            DateTime?             @map("approved_at")
  totalInputTokensUsed  Int?                  @default(0) @map("total_input_tokens_used")
  totalOutputTokensUsed Int?                  @default(0) @map("total_output_tokens_used")
  totalTokensUsed       Int?                  @default(0) @map("total_tokens_used")
  totalCost             Decimal?              @default(0) @map("total_cost") @db.Decimal(8, 4)
  processingTime        Int?                  @map("processing_time")
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")
  createdBy             String                @map("created_by") @db.Uuid

  // Relations
  jobs           ContentGenerationJob[]
  reports        Report[]
  parentWorkflow ContentGenerationWorkflow?  @relation("WorkflowParent", fields: [parentWorkflowId], references: [id])
  childWorkflows ContentGenerationWorkflow[] @relation("WorkflowParent")

  @@map("content_generation_workflows")
}

model ContentGenerationJob {
  id                String           @id @default(uuid()) @db.Uuid
  workflowId        String?          @map("workflow_id") @db.Uuid
  phase             Int
  promptTemplate    String           @map("prompt_template") @db.Text
  contextData       Json?            @map("context_data")
  aiModel           String           @default("gpt-4-turbo-preview") @map("ai_model") @db.VarChar(50)
  temperature       Decimal          @default(0.4) @db.Decimal(3, 2)
  maxTokens         Int              @default(4000) @map("max_tokens")
  inputPrompt       String           @map("input_prompt") @db.Text
  outputText        String?          @map("output_text") @db.Text
  imageUrl          String?          @map("image_url") @db.VarChar(500)
  qualityScore      Decimal?         @map("quality_score") @db.Decimal(3, 2)
  relevanceScore    Decimal?         @map("relevance_score") @db.Decimal(3, 2)
  innovationScore   Decimal?         @map("innovation_score") @db.Decimal(3, 2)
  completenessScore Decimal?         @map("completeness_score") @db.Decimal(3, 2)
  status            ContentJobStatus @default(PENDING)
  processingTime    Int?             @map("processing_time")
  retryCount        Int              @default(0) @map("retry_count")
  inputTokens       Int?             @map("input_tokens")
  outputTokens      Int?             @map("output_tokens")
  totalTokens       Int?             @map("total_tokens")
  cost              Decimal?         @db.Decimal(8, 4)
  errorMessage      String?          @map("error_message") @db.Text
  errorCode         String?          @map("error_code") @db.VarChar(50)
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  // Relations
  workflow ContentGenerationWorkflow? @relation(fields: [workflowId], references: [id])

  @@map("content_generation_jobs")
}

model TranslationJob {
  id                String               @id @default(uuid()) @db.Uuid
  contentType       String               @map("content_type") @db.VarChar(50)
  contentId         String               @map("content_id") @db.Uuid
  sourceLocale      String               @map("source_locale") @db.VarChar(5)
  targetLocale      String               @map("target_locale") @db.VarChar(5)
  fieldName         String               @map("field_name") @db.VarChar(50)
  originalText      String               @map("original_text") @db.Text
  translatedText    String?              @map("translated_text") @db.Text
  aiModel           String               @default("gpt-4") @map("ai_model") @db.VarChar(50)
  promptTemplate    String?              @map("prompt_template") @db.Text
  temperature       Decimal              @default(0.3) @db.Decimal(3, 2)
  maxTokens         Int                  @default(2000) @map("max_tokens")
  qualityScore      Decimal?             @map("quality_score") @db.Decimal(3, 2)
  fluencyScore      Decimal?             @map("fluency_score") @db.Decimal(3, 2)
  accuracyScore     Decimal?             @map("accuracy_score") @db.Decimal(3, 2)
  culturalScore     Decimal?             @map("cultural_score") @db.Decimal(3, 2)
  seoRelevanceScore Decimal?             @map("seo_relevance_score") @db.Decimal(3, 2)
  status            TranslationJobStatus @default(PENDING)
  priority          Int                  @default(0)
  retryCount        Int                  @default(0) @map("retry_count")
  inputTokens       Int?                 @map("input_tokens")
  outputTokens      Int?                 @map("output_tokens")
  totalTokens       Int?                 @map("total_tokens")
  estimatedCost     Decimal?             @map("estimated_cost") @db.Decimal(8, 4)
  actualCost        Decimal?             @map("actual_cost") @db.Decimal(8, 4)
  errorMessage      String?              @map("error_message") @db.Text
  errorCode         String?              @map("error_code") @db.VarChar(50)
  processingStarted DateTime?            @map("processing_started")
  processingEnded   DateTime?            @map("processing_ended")
  processingTime    Int?                 @map("processing_time")
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")
  createdBy         String?              @map("created_by") @db.Uuid

  // New fields for batching
  batchId String?           @map("batch_id") @db.Uuid
  batch   TranslationBatch? @relation(fields: [batchId], references: [id])

  @@map("translation_jobs")
}

model TranslationBatch {
  id            String               @id @default(uuid()) @db.Uuid
  name          String               @db.VarChar(255)
  status        TranslationJobStatus @default(PENDING) // PENDING, PROCESSING, COMPLETED, FAILED, CANCELLED
  contentType   String               @db.VarChar(50) // 'REPORT' or 'CATEGORY'
  targetLocales String[] // e.g., ['de', 'fr', 'es']
  totalJobs     Int                  @default(0)
  completedJobs Int                  @default(0)
  failedJobs    Int                  @default(0)
  progress      Decimal              @default(0) @db.Decimal(5, 2) // Percentage
  startedAt     DateTime?
  completedAt   DateTime?
  errorMessage  String?              @db.Text
  createdBy     String?              @map("created_by") @db.Uuid
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")

  jobs TranslationJob[]

  @@map("translation_batches")
}

model AiPromptTemplate {
  id                 String   @id @default(uuid()) @db.Uuid
  name               String   @unique @db.VarChar(255)
  promptType         String   @map("prompt_type") @db.VarChar(50)
  phase              Int?
  templateText       String   @map("template_text") @db.Text
  variables          Json?
  version            Int      @default(1)
  isActive           Boolean  @default(true) @map("is_active")
  usageCount         Int      @default(0) @map("usage_count")
  avgQualityScore    Decimal? @map("avg_quality_score") @db.Decimal(3, 2)
  avgCost            Decimal? @map("avg_cost") @db.Decimal(8, 4)
  successRate        Decimal? @map("success_rate") @db.Decimal(5, 4)
  defaultModel       String   @default("gpt-4") @map("default_model") @db.VarChar(50)
  defaultTemperature Decimal  @default(0.3) @map("default_temperature") @db.Decimal(3, 2)
  defaultMaxTokens   Int      @default(2000) @map("default_max_tokens")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  createdBy          String   @map("created_by") @db.Uuid

  @@map("ai_prompt_templates")
}

model ApiUsageLog {
  id           String   @id @default(uuid()) @db.Uuid
  serviceType  String   @map("service_type") @db.VarChar(50)
  model        String   @db.VarChar(50)
  requestId    String?  @map("request_id") @db.VarChar(100)
  jobId        String?  @map("job_id") @db.Uuid
  userId       String?  @map("user_id") @db.Uuid
  inputTokens  Int      @map("input_tokens")
  outputTokens Int      @map("output_tokens")
  totalTokens  Int      @map("total_tokens")
  costPerToken Decimal  @map("cost_per_token") @db.Decimal(10, 8)
  totalCost    Decimal  @map("total_cost") @db.Decimal(8, 4)
  responseTime Int      @map("response_time")
  success      Boolean
  errorMessage String?  @map("error_message") @db.Text
  requestData  Json?    @map("request_data")
  responseData Json?    @map("response_data")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("api_usage_logs")
}

model ApiQuota {
  id            String   @id @default(uuid()) @db.Uuid
  quotaType     String   @map("quota_type") @db.VarChar(20)
  serviceType   String   @map("service_type") @db.VarChar(50)
  quotaDate     String   @map("quota_date") @db.VarChar(10)
  tokensLimit   Int      @map("tokens_limit")
  requestsLimit Int      @map("requests_limit")
  costLimit     Decimal  @map("cost_limit") @db.Decimal(10, 2)
  tokensUsed    Int      @default(0) @map("tokens_used")
  requestsMade  Int      @default(0) @map("requests_made")
  costSpent     Decimal  @default(0) @map("cost_spent") @db.Decimal(10, 2)
  isExceeded    Boolean  @default(false) @map("is_exceeded")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@unique([quotaType, serviceType, quotaDate])
  @@map("api_quotas")
}

model User {
  id                 String     @id @default(uuid()) @db.Uuid
  email              String     @unique @db.VarChar(255)
  firstName          String?    @map("first_name") @db.VarChar(100)
  lastName           String?    @map("last_name") @db.VarChar(100)
  phone              String?    @db.VarChar(20)
  company            String?    @db.VarChar(200)
  country            String?    @db.VarChar(100)
  preferredLanguage  String     @default("en") @map("preferred_language") @db.VarChar(5)
  timezone           String?    @db.VarChar(50)
  newsletter         Boolean    @default(true)
  marketingOptIn     Boolean    @default(false) @map("marketing_opt_in")
  registrationSource String?    @map("registration_source") @db.VarChar(100)
  utmData            Json?      @map("utm_data")
  behaviorData       Json?      @map("behavior_data")
  status             UserStatus @default(ACTIVE)
  lastLoginAt        DateTime?  @map("last_login_at")
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")

  // Relations
  orders    Order[]
  enquiries Enquiry[]
  reviews   ReportReview[]

  @@map("users")
}

model Admin {
  id          String        @id @default(uuid()) @db.Uuid
  email       String        @unique @db.VarChar(255)
  username    String        @unique @db.VarChar(100)
  firstName   String?       @map("first_name") @db.VarChar(100)
  lastName    String?       @map("last_name") @db.VarChar(100)
  password    String        @db.VarChar(255)
  role        AdminRole
  permissions Json?
  status      ContentStatus @default(ACTIVE)
  lastLoginAt DateTime?     @map("last_login_at")
  loginCount  Int           @default(0) @map("login_count")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@map("admins")
}

model Order {
  id              String        @id @default(uuid()) @db.Uuid
  userId          String?       @map("user_id") @db.Uuid
  orderNumber     String        @unique @map("order_number") @db.VarChar(50)
  customerEmail   String        @map("customer_email") @db.VarChar(255)
  customerName    String        @map("customer_name") @db.VarChar(200)
  customerPhone   String?       @map("customer_phone") @db.VarChar(20)
  company         String?       @db.VarChar(200)
  country         String?       @db.VarChar(100)
  subtotal        Decimal       @db.Decimal(12, 2)
  discount        Decimal       @default(0) @db.Decimal(12, 2)
  tax             Decimal       @default(0) @db.Decimal(12, 2)
  total           Decimal       @db.Decimal(12, 2)
  currency        String        @default("USD") @db.VarChar(3)
  paymentMethod   String?       @map("payment_method") @db.VarChar(50)
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  paymentProvider String?       @map("payment_provider") @db.VarChar(50)
  transactionId   String?       @map("transaction_id") @db.VarChar(100)
  paymentDate     DateTime?     @map("payment_date")
  ipAddress       String?       @map("ip_address") @db.VarChar(45)
  userAgent       String?       @map("user_agent") @db.Text
  referrer        String?       @db.VarChar(500)
  utmData         Json?         @map("utm_data")
  status          OrderStatus   @default(PENDING)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  user  User?       @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id            String      @id @default(uuid()) @db.Uuid
  orderId       String      @map("order_id") @db.Uuid
  reportId      String      @map("report_id") @db.Uuid
  licenseType   LicenseType @map("license_type")
  price         Decimal     @db.Decimal(10, 2)
  quantity      Int         @default(1)
  accessGranted Boolean     @default(false) @map("access_granted")
  accessExpiry  DateTime?   @map("access_expiry")
  downloadCount Int         @default(0) @map("download_count")
  downloadLimit Int?        @map("download_limit")

  // Relations
  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  report Report @relation(fields: [reportId], references: [id])

  @@map("order_items")
}

model Enquiry {
  id            String        @id @default(uuid()) @db.Uuid
  reportId      String?       @map("report_id") @db.Uuid
  userId        String?       @map("user_id") @db.Uuid
  firstName     String        @map("first_name") @db.VarChar(100)
  lastName      String?       @map("last_name") @db.VarChar(100)
  email         String        @db.VarChar(255)
  phone         String?       @db.VarChar(20)
  company       String?       @db.VarChar(200)
  jobTitle      String?       @map("job_title") @db.VarChar(100)
  country       String?       @db.VarChar(100)
  subject       String?       @db.VarChar(300)
  message       String?       @db.Text
  enquiryType   String?       @map("enquiry_type") @db.VarChar(50)
  urgency       String?       @db.VarChar(20)
  budgetRange   String?       @map("budget_range") @db.VarChar(50)
  decisionMaker Boolean       @default(false) @map("decision_maker")
  timeline      String?       @db.VarChar(100)
  companySize   String?       @map("company_size") @db.VarChar(50)
  industry      String?       @db.VarChar(100)
  status        EnquiryStatus @default(NEW)
  assignedTo    String?       @map("assigned_to") @db.Uuid
  responseText  String?       @map("response_text") @db.Text
  responseDate  DateTime?     @map("response_date")
  followUpDate  DateTime?     @map("follow_up_date")
  source        String?       @db.VarChar(100)
  utmData       Json?         @map("utm_data")
  ipAddress     String?       @map("ip_address") @db.VarChar(45)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  report Report? @relation(fields: [reportId], references: [id])
  user   User?   @relation(fields: [userId], references: [id])

  @@map("enquiries")
}

model ReportReview {
  id                 String        @id @default(uuid()) @db.Uuid
  reportId           String        @map("report_id") @db.Uuid
  userId             String?       @map("user_id") @db.Uuid
  rating             Int
  title              String?       @db.VarChar(200)
  content            String?       @db.Text
  accuracyRating     Int?          @map("accuracy_rating")
  usefulnessRating   Int?          @map("usefulness_rating")
  presentationRating Int?          @map("presentation_rating")
  reviewerName       String?       @map("reviewer_name") @db.VarChar(100)
  reviewerCompany    String?       @map("reviewer_company") @db.VarChar(200)
  reviewerJobTitle   String?       @map("reviewer_job_title") @db.VarChar(100)
  status             ContentStatus @default(PUBLISHED)
  verified           Boolean       @default(false)
  helpful            Int           @default(0)
  reported           Int           @default(0)
  moderatorNote      String?       @map("moderator_note") @db.Text
  isPurchased        Boolean       @default(false) @map("is_purchased")
  purchaseOrderId    String?       @map("purchase_order_id") @db.Uuid
  verifiedPurchase   Boolean       @default(false) @map("verified_purchase")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")

  // Relations
  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [userId], references: [id])

  @@map("report_reviews")
}

model Blog {
  id               String        @id @default(uuid()) @db.Uuid
  categoryId       String?       @map("category_id") @db.Uuid
  title            String        @db.VarChar(300)
  slug             String        @unique @db.VarChar(150)
  excerpt          String?       @db.VarChar(500)
  content          String        @db.Text
  tags             String[]      @default([])
  industries       String[]      @default([])
  regions          String[]      @default([])
  keywords         String[]      @default([])
  semanticKeywords String[]      @default([]) @map("semantic_keywords")
  metaTitle        String?       @map("meta_title") @db.VarChar(300)
  metaDescription  String?       @map("meta_description") @db.VarChar(500)
  status           ContentStatus @default(DRAFT)
  featured         Boolean       @default(false)
  publishedAt      DateTime?     @map("published_at")
  viewCount        BigInt        @default(0) @map("view_count")
  shareCount       BigInt        @default(0) @map("share_count")
  readTime         Int?          @map("read_time")
  aiGenerated      Boolean       @default(false) @map("ai_generated")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  category     Category?         @relation(fields: [categoryId], references: [id])
  translations BlogTranslation[]

  @@map("blogs")
}

model BlogTranslation {
  id                 String            @id @default(uuid()) @db.Uuid
  blogId             String            @map("blog_id") @db.Uuid
  locale             String            @db.VarChar(5)
  title              String            @db.VarChar(300)
  slug               String            @db.VarChar(150)
  excerpt            String?           @db.VarChar(500)
  content            String            @db.Text
  tags               String[]          @default([])
  localizedKeywords  String[]          @default([]) @map("localized_keywords")
  metaTitle          String?           @map("meta_title") @db.VarChar(300)
  metaDescription    String?           @map("meta_description") @db.VarChar(500)
  translationJobId   String?           @map("translation_job_id") @db.Uuid
  aiGenerated        Boolean           @default(false) @map("ai_generated")
  humanReviewed      Boolean           @default(false) @map("human_reviewed")
  translationQuality Decimal?          @map("translation_quality") @db.Decimal(3, 2)
  status             TranslationStatus @default(DRAFT)
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")

  // Relations
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([blogId, locale])
  @@map("blog_translations")
}

model SeoAnalytic {
  id           String   @id @default(uuid()) @db.Uuid
  contentType  String   @map("content_type") @db.VarChar(50)
  contentId    String   @map("content_id") @db.Uuid
  locale       String   @db.VarChar(5)
  searchEngine String   @map("search_engine") @db.VarChar(20)
  keyword      String   @db.VarChar(255)
  position     Int?
  impressions  BigInt   @default(0)
  clicks       BigInt   @default(0)
  ctr          Decimal  @default(0) @db.Decimal(5, 4)
  date         DateTime @db.Date
  country      String?  @db.VarChar(3)
  device       String?  @db.VarChar(20)
  createdAt    DateTime @default(now()) @map("created_at")

  @@unique([contentType, contentId, locale, searchEngine, keyword, date, country, device])
  @@map("seo_analytics")
}

model AiReportSession {
  id                String   @id @default(uuid()) @db.Uuid
  reportTitle       String   @db.VarChar(500)
  totalInputTokens  Int
  totalOutputTokens Int
  totalCost         Decimal  @db.Decimal(10, 4)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  promptResults AiPromptResult[]

  @@map("ai_report_sessions")
}

model AiPromptResult {
  id            String   @id @default(uuid()) @db.Uuid
  sessionId     String   @map("session_id") @db.Uuid
  promptId      String   @db.VarChar(50)
  title         String   @db.VarChar(255)
  content       String   @db.Text
  inputTokens   Int
  outputTokens  Int
  totalTokens   Int
  cost          Decimal  @db.Decimal(10, 4)
  executionTime Int
  createdAt     DateTime @default(now()) @map("created_at")

  session AiReportSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("ai_prompt_results")
}

model Testimonial {
  id        String   @id @default(uuid()) @db.Uuid
  author    String   @db.VarChar(255)
  company   String?  @db.VarChar(255)
  position  String?  @db.VarChar(255)
  content   String   @db.Text
  rating    Int?     @default(5) @db.SmallInt // e.g., 1 to 5 stars
  approved  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("testimonials")
}

model ReportTranslation {
  id                      String            @id @default(uuid()) @db.Uuid
  reportId                String            @map("report_id") @db.Uuid
  locale                  String            @db.VarChar(5)
  title                   String            @db.VarChar(500)
  description             String            @db.Text
  summary                 String?           @db.Text
  marketAnalysis          String?           @map("market_analysis") @db.Text
  competitiveAnalysis     String?           @map("competitive_analysis") @db.Text
  trendsAnalysis          String?           @map("trends_analysis") @db.Text
  finalSynthesis          String?           @map("final_synthesis") @db.Text
  keyPlayers              String[]          @default([]) @map("key_players")
  strategicDevelopments   String?           @map("strategic_developments") @db.Text
  slug                    String            @db.VarChar(200)
  tableOfContents         String?           @map("table_of_contents") @db.Text
  listOfFigures           String?           @map("list_of_figures") @db.Text
  methodology             String?           @db.Text
  keyFindings             String[]          @default([]) @map("key_findings")
  executiveSummary        String?           @map("executive_summary") @db.Text
  keywords                String[]          @default([])
  semanticKeywords        String[]          @default([]) @map("semantic_keywords")
  localizedKeywords       String[]          @default([]) @map("localized_keywords")
  culturalKeywords        String[]          @default([]) @map("cultural_keywords")
  longTailKeywords        String[]          @default([]) @map("long_tail_keywords")
  localCompetitorKeywords String[]          @default([]) @map("local_competitor_keywords")
  metaTitle               String            @map("meta_title") @db.VarChar(500)
  metaDescription         String            @map("meta_description") @db.VarChar(500)
  canonicalUrl            String?           @map("canonical_url") @db.VarChar(500)
  ogTitle                 String?           @map("og_title") @db.VarChar(500)
  ogDescription           String?           @map("og_description") @db.VarChar(500)
  ogImage                 String?           @map("og_image") @db.VarChar(500)
  twitterTitle            String?           @map("twitter_title") @db.VarChar(500)
  twitterDescription      String?           @map("twitter_description") @db.VarChar(500)
  schemaMarkup            Json?             @map("schema_markup")
  breadcrumbData          Json?             @map("breadcrumb_data")
  faqData                 Json?             @map("faq_data")
  localBusinessSchema     Json?             @map("local_business_schema")
  translationJobId        String?           @map("translation_job_id") @db.Uuid
  aiGenerated             Boolean           @default(false) @map("ai_generated")
  humanReviewed           Boolean           @default(false) @map("human_reviewed")
  translationQuality      Decimal?          @map("translation_quality") @db.Decimal(3, 2)
  culturalAdaptationScore Decimal?          @map("cultural_adaptation_score") @db.Decimal(3, 2)
  culturalAdaptationNotes String?           @map("cultural_adaptation_notes") @db.Text
  localizationNotes       String?           @map("localization_notes") @db.Text
  searchPerformance       Json?             @map("search_performance")
  localRankings           Json?             @map("local_rankings")
  regionalCtr             Decimal?          @map("regional_ctr") @db.Decimal(5, 4)
  regionalImpressions     BigInt            @default(0) @map("regional_impressions")
  regionalClicks          BigInt            @default(0) @map("regional_clicks")
  status                  TranslationStatus @default(DRAFT)
  createdAt               DateTime          @default(now()) @map("created_at")
  updatedAt               DateTime          @updatedAt @map("updated_at")

  // Relations
  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@unique([reportId, locale])
  @@map("report_translations")
}
